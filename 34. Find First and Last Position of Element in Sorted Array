34. Find First and Last Position of Element in Sorted Array
Solution Link: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/discuss/2332516/clean-c-code-with-explanation-two-pointers


In this approach, we will iterate through the nums array using two pointers i and j: i for front and j for rear end. We will stop when i cross j, i.e., i>j.
This will make the time complexity: O(log n). We are also taking an array 'who' to keep a check whether i pointer has updated that index or the j ponter.

Now lets take a look on various cases:
Lets suppose all the elements exist at one end only. In that case, one of these pointers will not be able to fulfil its task.
Hence, we have placed several conditions to overcome this problem.
Consider these examples for better understanding:

nums=[1,3] target=1
nums=[1,2,3,3,3,3,4,5,9] target=3
nums=[1,2,2,3,4,4,4] target=4
At the end, we have to make sure that if target exist only once, then only one of the elements of ans will be updated.
For that we will have to put appropriate conditions as can be seen in the code below from the line succeeding the loop.

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int i=0, j=nums.size()-1;
        vector<int> ans(2, -1);
        vector<char> who(2);
        while(i<=j)
        {
            if(nums[i]==target)
            {
                if(ans[0]==-1 || who[0]=='j')
                {
                    ans[0]=i;
                    who[0]='i';
                }
                else if(ans[1]==-1 || who[1]=='i')
                {
                    ans[1]=i;
                    who[1]='i';
                }
            }
            
            if(nums[j]==target)
            {
                if(ans[1]==-1 || who[1]=='i')
                {
                    ans[1]=j;
                    who[1]='j';
                }
                else if(ans[0]==-1 || who[0]=='j')
                {
                    ans[0]=j;
                    who[0]='j';
                }
            }
            
            i++;
            j--;
        }
        if(ans[0]==-1 && ans[1]!=-1)
        {
            ans[0]=ans[1];
        }
        if(ans[0]!=-1 && ans[1]==-1)
        {
            ans[1]=ans[0];
        }
        return ans;
    }
};

Please upvote if it helped you :)
